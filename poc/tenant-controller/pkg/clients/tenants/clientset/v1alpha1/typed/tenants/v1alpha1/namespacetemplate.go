// Copyright 2017 The Kubernetes Authors.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//     http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"time"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
	v1alpha1 "sigs.k8s.io/multi-tenancy/poc/tenant-controller/pkg/apis/tenants/v1alpha1"
	scheme "sigs.k8s.io/multi-tenancy/poc/tenant-controller/pkg/clients/tenants/clientset/v1alpha1/scheme"
)

// NamespaceTemplatesGetter has a method to return a NamespaceTemplateInterface.
// A group's client should implement this interface.
type NamespaceTemplatesGetter interface {
	NamespaceTemplates() NamespaceTemplateInterface
}

// NamespaceTemplateInterface has methods to work with NamespaceTemplate resources.
type NamespaceTemplateInterface interface {
	Create(*v1alpha1.NamespaceTemplate) (*v1alpha1.NamespaceTemplate, error)
	Update(*v1alpha1.NamespaceTemplate) (*v1alpha1.NamespaceTemplate, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha1.NamespaceTemplate, error)
	List(opts v1.ListOptions) (*v1alpha1.NamespaceTemplateList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.NamespaceTemplate, err error)
	NamespaceTemplateExpansion
}

// namespaceTemplates implements NamespaceTemplateInterface
type namespaceTemplates struct {
	client rest.Interface
}

// newNamespaceTemplates returns a NamespaceTemplates
func newNamespaceTemplates(c *TenantsV1alpha1Client) *namespaceTemplates {
	return &namespaceTemplates{
		client: c.RESTClient(),
	}
}

// Get takes name of the namespaceTemplate, and returns the corresponding namespaceTemplate object, and an error if there is any.
func (c *namespaceTemplates) Get(name string, options v1.GetOptions) (result *v1alpha1.NamespaceTemplate, err error) {
	result = &v1alpha1.NamespaceTemplate{}
	err = c.client.Get().
		Resource("namespacetemplates").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of NamespaceTemplates that match those selectors.
func (c *namespaceTemplates) List(opts v1.ListOptions) (result *v1alpha1.NamespaceTemplateList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1alpha1.NamespaceTemplateList{}
	err = c.client.Get().
		Resource("namespacetemplates").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested namespaceTemplates.
func (c *namespaceTemplates) Watch(opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Resource("namespacetemplates").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a namespaceTemplate and creates it.  Returns the server's representation of the namespaceTemplate, and an error, if there is any.
func (c *namespaceTemplates) Create(namespaceTemplate *v1alpha1.NamespaceTemplate) (result *v1alpha1.NamespaceTemplate, err error) {
	result = &v1alpha1.NamespaceTemplate{}
	err = c.client.Post().
		Resource("namespacetemplates").
		Body(namespaceTemplate).
		Do().
		Into(result)
	return
}

// Update takes the representation of a namespaceTemplate and updates it. Returns the server's representation of the namespaceTemplate, and an error, if there is any.
func (c *namespaceTemplates) Update(namespaceTemplate *v1alpha1.NamespaceTemplate) (result *v1alpha1.NamespaceTemplate, err error) {
	result = &v1alpha1.NamespaceTemplate{}
	err = c.client.Put().
		Resource("namespacetemplates").
		Name(namespaceTemplate.Name).
		Body(namespaceTemplate).
		Do().
		Into(result)
	return
}

// Delete takes name of the namespaceTemplate and deletes it. Returns an error if one occurs.
func (c *namespaceTemplates) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Resource("namespacetemplates").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *namespaceTemplates) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Resource("namespacetemplates").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched namespaceTemplate.
func (c *namespaceTemplates) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.NamespaceTemplate, err error) {
	result = &v1alpha1.NamespaceTemplate{}
	err = c.client.Patch(pt).
		Resource("namespacetemplates").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
