// Copyright 2017 The Kubernetes Authors.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//     http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "sigs.k8s.io/multi-tenancy/poc/tenant-controller/pkg/apis/tenants/v1alpha1"
)

// NamespaceTemplateLister helps list NamespaceTemplates.
type NamespaceTemplateLister interface {
	// List lists all NamespaceTemplates in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.NamespaceTemplate, err error)
	// Get retrieves the NamespaceTemplate from the index for a given name.
	Get(name string) (*v1alpha1.NamespaceTemplate, error)
	NamespaceTemplateListerExpansion
}

// namespaceTemplateLister implements the NamespaceTemplateLister interface.
type namespaceTemplateLister struct {
	indexer cache.Indexer
}

// NewNamespaceTemplateLister returns a new NamespaceTemplateLister.
func NewNamespaceTemplateLister(indexer cache.Indexer) NamespaceTemplateLister {
	return &namespaceTemplateLister{indexer: indexer}
}

// List lists all NamespaceTemplates in the indexer.
func (s *namespaceTemplateLister) List(selector labels.Selector) (ret []*v1alpha1.NamespaceTemplate, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.NamespaceTemplate))
	})
	return ret, err
}

// Get retrieves the NamespaceTemplate from the index for a given name.
func (s *namespaceTemplateLister) Get(name string) (*v1alpha1.NamespaceTemplate, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("namespacetemplate"), name)
	}
	return obj.(*v1alpha1.NamespaceTemplate), nil
}
